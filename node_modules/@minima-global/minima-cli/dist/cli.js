#!/usr/bin/env node
import{a as u,b as p,c as d,d as f,e as g,f as s}from"./chunk-72HLBJSM.js";import h from"chalk";import{Command as y}from"commander";import{readFileSync as c}from"fs";import l from"ora";import m from"chalk";var o={info:t=>{console.log(m.blue(t))},error:t=>{console.error(m.red(t))},success:t=>{console.log(m.green(t))},break:()=>{console.log("")}};var n=new y,D=JSON.parse(c("./package.json","utf-8")).version;n.name("minima").description("CLI to manage Minima MiniDapps").version(D);n.command("zip").description("Build and zip the MiniDapp").option("-l, --logs","Debug logs",!1).action(async t=>{let i=l("Building MiniDapp...").start();try{let e=JSON.parse(c("./package.json","utf-8"));await p(t.logs),i.text="Zipping MiniDapp...";let a=`${e.name}-${e.version}.mds.zip`,r=u()?"build/":"./";t.logs&&(console.log("filePath",r),console.log("zipFileName",a)),await s(a,r,t.logs),setTimeout(()=>{i.succeed(h.green(`MiniDapp built and zipped successfully! ${a}`))},5e3)}catch(e){t.logs&&console.log("error",e),i.fail(h.red("Failed to build and zip MiniDapp")),process.exit(1)}});n.command("install").description("Install the MiniDapp").option("-p, --port <port>","rpcport number","9005").action(async t=>{let i;try{let e=JSON.parse(c("./package.json","utf-8"));i=l("Installing MiniDapp...").start(),await p();let a=`${e.name}-${e.version}.mds.zip`,r=e.template==="react-ts"?"build/":"./";await s(a,r),await d({port:parseInt(t.port),pathToFile:process.cwd(),miniDappName:e.name,miniDappVersion:e.version}),setTimeout(()=>{i?.succeed("MiniDapp installed successfully!")},2e3)}catch(e){i?.fail("Failed to install MiniDapp"),e instanceof Error?(o.error(e.message),o.info(`Port: ${t.port}`),o.info("Please check that you have RPC enabled on your Minima node and that the port is correct"),o.info("If you are using a custom port other than 9005, please use the -p option to specify the port")):o.error(String(e)),process.exit(1)}});n.command("uninstall").option("-p, --port <port>","port number","9005").description("Uninstall the MiniDapp").action(async t=>{let i;try{i=l("Uninstalling MiniDapp...").start(),await f({port:parseInt(t.port)}),setTimeout(()=>{i?.succeed("MiniDapp uninstalled successfully!")},2e3)}catch(e){i?.fail("Failed to uninstall MiniDapp"),e instanceof Error?(o.error(e.message),o.info(`Port: ${t.port}`),o.info("Please check that you have RPC enabled on your Minima node and that the port is correct"),o.info("If you are using a custom port other than 9005, please use the -p option to specify the port")):o.error(String(e)),process.exit(1)}});n.command("update").description("Update the MiniDapp").option("-p, --port <port>","rpcport number","9005").action(async t=>{let i;try{let e=JSON.parse(c("./package.json","utf-8"));i=l("Updating MiniDapp...").start(),await p();let a=`${e.name}-${e.version}.mds.zip`,r=e.template==="react-ts"?"build/":"./";await s(a,r),await g({port:parseInt(t.port)}),setTimeout(()=>{i?.succeed("MiniDapp updated successfully!")},2e3)}catch(e){i?.fail("Failed to update MiniDapp"),e instanceof Error?(o.error(e.message),o.info(`Port: ${t.port}`),o.info("Please check that you have RPC enabled on your Minima node and that the port is correct"),o.info("If you are using a custom port other than 9005, please use the -p option to specify the port")):o.error(String(e)),process.exit(1)}});n.parse();
//# sourceMappingURL=cli.js.map